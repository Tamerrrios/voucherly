import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Alert,
} from 'react-native';
import ProgressHeader from '../components/ProgressHeader';
import Ionicons from 'react-native-vector-icons/Ionicons';
import Animated, { FadeInUp } from 'react-native-reanimated';
import { useFocusEffect, useNavigation } from '@react-navigation/native';
import { useOrder } from '../context/OrderContext';
import { addDoc, collection, serverTimestamp } from 'firebase/firestore';
import { Image } from 'react-native-animatable';

import firestore from '@react-native-firebase/firestore';
import { auth } from '../firebase/firebase';
import { v4 as uuidv4 } from 'uuid';


const CheckoutScreen = () => {

  const navigation = useNavigation();
  const { order, resetOrder } = useOrder();
  const { imageUrl, audioUrl, comment, voucher, partnerName, receiverPhone } = order || {};

const generateUniqueVoucherCode = async (): Promise<string> => {
  const characters = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';

  const generateCode = () => {
    let result = '';
    for (let i = 0; i < 6; i++) {
      result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return `VC-${result}`;
  };

  let voucherCode = '';
  let exists = true;

  while (exists) {
    voucherCode = generateCode();
    const snapshot = await firestore()
      .collection('orders')
      .where('voucherCode', '==', voucherCode)
      .get();
    exists = !snapshot.empty;
  }

  return voucherCode;
};


useFocusEffect(
  React.useCallback(() => {
    let isActive = true; // –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å —ç–∫—Ä–∞–Ω–∞

    const checkUserVerification = async () => {
      const user = auth().currentUser;
      if (!user) {
        if (isActive) {
          navigation.navigate('AuthRedirect', {
            returnTo: 'Checkout',
          });
        }
        return;
      }

      try {
        await user.reload(); // –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (isActive && !user.emailVerified) {
          Alert.alert(
            '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email',
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–∏—Å—å–º–∞.',
            [
              {
                text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                onPress: async () => {
                  try {
                    await user.sendEmailVerification();
                    Alert.alert('–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–ü–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.');
                  } catch (e) {
                    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                  }
                },
              },
              {
                text: '–û–∫',
                style: 'cancel',
                onPress: () => navigation.goBack(),
              },
            ],
            { cancelable: false }
          );
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
      }
    };

    checkUserVerification();

    return () => {
      isActive = false;
    };
  }, [navigation])
);
  
const handleConfirm = async () => {
  console.log('[CONFIRM] –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');

  if (!order || typeof order !== 'object') {
    Alert.alert('–û—à–∏–±–∫–∞', '–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    return;
  }

  const cleanOrder = Object.fromEntries(
    Object.entries(order).filter(([_, v]) => v !== undefined)
  );

  const userID = auth().currentUser?.uid;

  try {
    const voucherCode = await generateUniqueVoucherCode();
    console.log('[VoucherCode]', voucherCode);

    const docRef = await firestore().collection('orders').add({
      ...cleanOrder,
      userID,
      voucherCode, // üëà –ß–∏—Ç–∞–µ–º—ã–π –∫–æ–¥ –≤–∞—É—á–µ—Ä–∞
      createdAt: firestore.FieldValue.serverTimestamp(),
    });

    navigation.navigate('Success', { orderId: docRef.id });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏:', error);
    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
};



  // const handleConfirm = async () => {
  //   const cleanOrder = Object.fromEntries(
  //     Object.entries(order).filter(([_, v]) => v !== undefined)
  //   );
  
  //   const userID = auth().currentUser?.uid;
  
  //   try {
  //     const docRef = await firestore()
  //       .collection('orders')
  //       .add({
  //         ...cleanOrder,
  //         userID, // üëà –î–æ–±–∞–≤–ª—è–µ–º userId
  //         createdAt: firestore.FieldValue.serverTimestamp(),
  //       });

  //     // await docRef.update({ orderId: docRef.id });
  //     navigation.navigate('Success', { orderId: docRef.id });
  //     // navigation.navigate('Success');
  //   } catch (error) {
  //     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:', error);
  //     Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  //   }
  // };

  return (
    <View style={styles.wrapper}>
      <ProgressHeader currentStep={3} steps={['–ü–æ–ª—É—á–∞—Ç–µ–ª—å', '–ú–µ–¥–∏–∞', '–û–ø–ª–∞—Ç–∞']} />

      <ScrollView
        contentContainerStyle={styles.container}
        showsVerticalScrollIndicator={false}
      >
        <Animated.View entering={FadeInUp.delay(100).duration(400)}>
          <Text style={styles.title}>üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑</Text>
        </Animated.View>

        {/* Voucher Info */}
        <Animated.View style={styles.card} entering={FadeInUp.delay(200).duration(400)}>
          <Text style={styles.cardTitle}>üéÅ –í–∞—É—á–µ—Ä</Text>
          <Text style={styles.cardValue}>
          {voucher && `${partnerName} - ${voucher.price.toLocaleString('ru-RU')} –°—É–º`}
            {/* {`${parnertName} - ${voucher.price.toLocaleString('ru-RU')} –°—É–º`} */}
          </Text>
        </Animated.View>

        {/* Receiver Info */}
        <Animated.View style={styles.card} entering={FadeInUp.delay(300).duration(400)}>
          <Text style={styles.cardTitle}>üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å</Text>
          <Text style={styles.cardValue}>{receiverPhone}</Text>
        </Animated.View>

        {/* Media info */}
        {(imageUrl || comment) && (
          <Animated.View style={styles.card} entering={FadeInUp.delay(400).duration(400)}>
            <Text style={styles.cardTitle}>üìé –ú–µ–¥–∏–∞</Text>
            <Text style={styles.cardValue}>
              {imageUrl && comment
                ? '1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
                : imageUrl
                  ? '1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
                  : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
            </Text>
          </Animated.View>
        )}
        <Animated.View style={styles.card} entering={FadeInUp.delay(500).duration(400)}>
          <Text style={styles.cardTitle}>üí∞ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</Text>
          <TouchableOpacity style={styles.paymentBtn}>
            <Image
              source={require('../../assets/images/atm-card.png')}
              style={{ width: 18, height: 18 }}
              resizeMode="contain"
            />
            <Text style={styles.paymentText}>–ö–∞—Ä—Ç–∞ (UzCard / Humo)</Text>
          </TouchableOpacity>
        </Animated.View>

        <View style={{ height: 120 }} />
      </ScrollView>

      {/* Confirm button */}
      <View style={styles.footer}>
        <TouchableOpacity style={styles.confirmBtn} onPress={handleConfirm}>
          <Text style={styles.confirmText}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  wrapper: {
    flex: 1,
    backgroundColor: '#FAFAFA',
  },
  container: {
    paddingHorizontal: 16,
    paddingBottom: 20,
    paddingTop: 20,
  },
  title: {
    fontSize: 22,
    fontWeight: '700',
    marginBottom: 20,
  },
  card: {
    backgroundColor: '#fff',
    borderRadius: 14,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOpacity: 0.05,
    shadowOffset: { width: 0, height: 4 },
    shadowRadius: 8,
    elevation: 3,
  },
  cardTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: '#666',
    marginBottom: 4,
  },
  cardValue: {
    fontSize: 16,
    fontWeight: '700',
    color: '#333',
  },
  paymentBtn: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    paddingVertical: 10,
  },
  paymentText: {
    fontSize: 15,
    color: '#333',
    fontWeight: '600',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 16,
    right: 16,
  },
  confirmBtn: {
    backgroundColor: '#E53935',
    paddingVertical: 14,
    borderRadius: 16,
    alignItems: 'center',
  },
  confirmText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '700',
  },
});

export default CheckoutScreen;